import streamlit as st
import pandas as pd
import numpy as np # C·∫ßn ƒë·ªÉ t√≠nh NPV v√† IRR
import json
import time
from google import genai
from google.genai.errors import APIError

# --- C·∫•u h√¨nh Trang Streamlit ---
st.set_page_config(
    page_title="App ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh",
    layout="wide"
)

# Khai b√°o bi·∫øn API Key (T·ª± ƒë·ªông l·∫•y t·ª´ Streamlit Secrets)
API_KEY = st.secrets.get("GEMINI_API_KEY")

st.title("·ª®ng d·ª•ng ƒê√°nh gi√° Ph∆∞∆°ng √°n Kinh doanh (CAPEX) üíº")
st.markdown("---")

# --- H√†m t√≠nh to√°n NPV, IRR, PP, DPP (Task 3) ---
def calculate_project_metrics(cash_flows, wacc_rate):
    """T√≠nh to√°n NPV, IRR, PP, DPP d·ª±a tr√™n d√≤ng ti·ªÅn v√† WACC."""
    
    # NPV (Net Present Value - Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)
    # np.npv(rate, values)
    npv = np.npv(wacc_rate, cash_flows)
    
    # IRR (Internal Rate of Return - T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)
    # np.irr(values)
    irr = np.irr(cash_flows)
    
    # T√≠nh Payback Period (PP) v√† Discounted Payback Period (DPP)
    
    # 1. T√≠nh Payback Period (PP - Th·ªùi gian ho√†n v·ªën)
    cumulative_cf = np.cumsum(cash_flows)
    payback_period = float('inf') 
    
    # L·∫∑p qua d√≤ng ti·ªÅn t√≠ch l≈©y ƒë·ªÉ t√¨m ƒëi·ªÉm ho√†n v·ªën (cum_cf >= 0)
    for i, cum_cf in enumerate(cumulative_cf):
        if cum_cf >= 0:
            if i == 0:
                 payback_period = 0 
            else:
                 # S·ªë ti·ªÅn c√≤n l·∫°i c·∫ßn ho√†n v·ªën ngay tr∆∞·ªõc nƒÉm i
                 amount_to_recover = -cumulative_cf[i-1] 
                 # Th·ªùi gian c·∫ßn th√™m trong nƒÉm i: (S·ªë ti·ªÅn c·∫ßn b√π ƒë·∫Øp) / (D√≤ng ti·ªÅn r√≤ng nƒÉm i)
                 fractional_year = amount_to_recover / cash_flows[i]
                 payback_period = i - 1 + fractional_year
            break
        
    # 2. T√≠nh Discounted Payback Period (DPP - Th·ªùi gian ho√†n v·ªën chi·∫øt kh·∫•u)
    
    # T√≠nh d√≤ng ti·ªÅn chi·∫øt kh·∫•u (Discounted Cash Flow - DCF)
    dcf = [cash_flows[i] / ((1 + wacc_rate) ** i) for i in range(len(cash_flows))]
    dcf_cumulative = np.cumsum(dcf)
    
    discounted_payback_period = float('inf') 
    for i, cum_dcf in enumerate(dcf_cumulative):
        if cum_dcf >= 0:
            if i == 0:
                discounted_payback_period = 0
            else:
                 # S·ªë ti·ªÅn c√≤n l·∫°i c·∫ßn ho√†n v·ªën ngay tr∆∞·ªõc nƒÉm i
                 amount_to_recover = -dcf_cumulative[i-1] 
                 # Th·ªùi gian c·∫ßn th√™m trong nƒÉm i: (S·ªë ti·ªÅn c·∫ßn b√π ƒë·∫Øp) / (DCF nƒÉm i)
                 fractional_year = amount_to_recover / dcf[i]
                 discounted_payback_period = i - 1 + fractional_year
            break

    return {
        "NPV": npv,
        "IRR": irr,
        "PP": payback_period,
        "DPP": discounted_payback_period
    }

# --- H√†m g·ªçi API Gemini ƒë·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu (Task 1) ---
def extract_financial_parameters(file_bytes, file_mime_type, api_key):
    """Tr√≠ch xu·∫•t c√°c tham s·ªë t√†i ch√≠nh t·ª´ n·ªôi dung file Word b·∫±ng Gemini API (JSON output)."""
    
    if not api_key:
        raise ValueError("API Key kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh.")

    try:
        client = genai.Client(api_key=api_key)
        
        # System Instruction: ƒê·ªãnh r√µ vai tr√≤ v√† y√™u c·∫ßu format JSON
        system_instruction = (
            "B·∫°n l√† m·ªôt chuy√™n gia t√†i ch√≠nh. Nhi·ªám v·ª• c·ªßa b·∫°n l√† ƒë·ªçc file m√¥ t·∫£ d·ª± √°n "
            "v√† tr√≠ch xu·∫•t c√°c tham s·ªë quan tr·ªçng sau v√†o ƒë·ªãnh d·∫°ng JSON. "
            "D·ªØ li·ªáu ph·∫£i l√† s·ªë. WACC v√† Thu·∫ø ph·∫£i l√† gi√° tr·ªã th·∫≠p ph√¢n (v√≠ d·ª•: 10% l√† 0.1)."
        )

        # JSON Schema b·∫Øt bu·ªôc ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·∫ßu ra nh·∫•t qu√°n
        response_schema = {
            "type": "OBJECT",
            "properties": {
                "project_name": {"type": "STRING", "description": "T√™n ho·∫∑c m√¥ t·∫£ ng·∫Øn g·ªçn c·ªßa d·ª± √°n."},
                "investment_cost": {"type": "NUMBER", "description": "V·ªën ƒë·∫ßu t∆∞ ban ƒë·∫ßu (CF0)."},
                "project_lifetime_years": {"type": "INTEGER", "description": "D√≤ng ƒë·ªùi d·ª± √°n theo nƒÉm."},
                "annual_revenue": {"type": "NUMBER", "description": "Doanh thu h√†ng nƒÉm (R), gi·∫£ ƒë·ªãnh kh√¥ng ƒë·ªïi."},
                "annual_cost_excluding_tax": {"type": "NUMBER", "description": "Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm (C), ch∆∞a bao g·ªìm thu·∫ø."},
                "wacc_rate": {"type": "NUMBER", "description": "Chi ph√≠ v·ªën b√¨nh qu√¢n (WACC), ƒë·ªãnh d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.1 cho 10%)."},
                "tax_rate": {"type": "NUMBER", "description": "Thu·∫ø su·∫•t thu nh·∫≠p doanh nghi·ªáp, ƒë·ªãnh d·∫°ng th·∫≠p ph√¢n (v√≠ d·ª•: 0.2 cho 20%)."}
            },
            "required": [
                "project_name", "investment_cost", "project_lifetime_years", "annual_revenue", 
                "annual_cost_excluding_tax", "wacc_rate", "tax_rate"
            ]
        }
        
        prompt = (
            "H√£y tr√≠ch xu·∫•t 7 th√¥ng tin t√†i ch√≠nh quan tr·ªçng sau t·ª´ file Word ƒë√≠nh k√®m: "
            "1. T√™n d·ª± √°n, 2. V·ªën ƒë·∫ßu t∆∞, 3. D√≤ng ƒë·ªùi d·ª± √°n (nƒÉm), 4. Doanh thu h√†ng nƒÉm, "
            "5. Chi ph√≠ ho·∫°t ƒë·ªông h√†ng nƒÉm, 6. Chi ph√≠ v·ªën (WACC), 7. Thu·∫ø su·∫•t. "
            "ƒê·∫£m b·∫£o k·∫øt qu·∫£ ƒë·∫ßu ra l√† JSON h·ª£p l·ªá theo Schema ƒë√£ cho."
        )

        # Multimodal request payload: G·ª≠i file bytes v√† prompt c√πng l√∫c
        contents = [
            {
                "inlineData": {
                    "data": file_bytes,
                    "mimeType": file_mime_type # V√≠ d·ª•: application/vnd.openxmlformats-officedocument.wordprocessingml.document
                }
            },
            {"text": prompt}
        ]
        
        config = {
            "responseMimeType": "application/json",
            "responseSchema": response_schema,
        }
        
        # √Åp d·ª•ng Exponential Backoff ƒë·ªÉ tƒÉng ƒë·ªô tin c·∫≠y c·ªßa API call
        max_retries = 3
        for attempt in range(max_retries):
            try:
                response = client.models.generate_content(
                    model='gemini-2.5-flash',
                    contents=contents,
                    system_instruction=system_instruction,
                    config=config,
                )
                
                # Tr·∫£ v·ªÅ k·∫øt qu·∫£ n·∫øu th√†nh c√¥ng
                return json.loads(response.text)
            except (APIError, json.JSONDecodeError) as e:
                if attempt < max_retries - 1:
                    wait_time = 2 ** attempt
                    time.sleep(wait_time)
                else:
                    raise e

    except APIError as e:
        st.error(f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}")
        return None
    except json.JSONDecodeError:
        st.error("L·ªói gi·∫£i m√£ JSON t·ª´ AI. Vui l√≤ng ƒë·∫£m b·∫£o file Word c√≥ c·∫•u tr√∫c r√µ r√†ng v√† c√°c th√¥ng s·ªë l√† s·ªë.")
        return None
    except Exception as e:
        st.error(f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh trong qu√° tr√¨nh tr√≠ch xu·∫•t: {e}")
        return None

# --- H√†m g·ªçi API Gemini ƒë·ªÉ ph√¢n t√≠ch (Task 4) ---
def get_project_analysis(metrics_data, cash_flow_df, api_key):
    """Ph√¢n t√≠ch c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n b·∫±ng Gemini AI."""
    
    if not api_key:
        return "L·ªói: API Key ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh."

    try:
        client = genai.Client(api_key=api_key)
        
        # Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu sang ƒë·ªãnh d·∫°ng Markdown ƒë·ªÉ AI d·ªÖ ƒë·ªçc
        metrics_markdown = pd.DataFrame(metrics_data.items(), columns=["Ch·ªâ s·ªë", "Gi√° tr·ªã"]).to_markdown(index=False)
        cash_flow_markdown = cash_flow_df.to_markdown(index=False)

        prompt = f"""
        B·∫°n l√† m·ªôt Chuy√™n gia Th·∫©m ƒë·ªãnh D·ª± √°n ƒê·∫ßu t∆∞. D·ª±a tr√™n c√°c ch·ªâ s·ªë hi·ªáu qu·∫£ d·ª± √°n v√† b·∫£ng d√≤ng ti·ªÅn sau, 
        h√£y ƒë∆∞a ra m·ªôt nh·∫≠n x√©t ph√¢n t√≠ch chuy√™n s√¢u (kho·∫£ng 3-4 ƒëo·∫°n). 
        
        Ph√¢n t√≠ch c·∫ßn t·∫≠p trung v√†o:
        1. T√≠nh kh·∫£ thi c·ªßa d·ª± √°n (d·ª±a tr√™n NPV v√† IRR so v·ªõi WACC).
        2. R·ªßi ro v√† t√≠nh thanh kho·∫£n (d·ª±a tr√™n PP v√† DPP).
        3. Khuy·∫øn ngh·ªã (N√™n ch·∫•p nh·∫≠n, t·ª´ ch·ªëi hay c·∫ßn xem x√©t th√™m).
        
        --- B·∫£ng Ch·ªâ s·ªë Hi·ªáu qu·∫£ ---
        {metrics_markdown}
        
        --- B·∫£ng D√≤ng ti·ªÅn (Summary) ---
        {cash_flow_markdown}
        """
        
        response = client.models.generate_content(
            model='gemini-2.5-flash',
            contents=prompt
        )
        return response.text

    except APIError as e:
        return f"L·ªói g·ªçi Gemini API: Vui l√≤ng ki·ªÉm tra Kh√≥a API ho·∫∑c gi·ªõi h·∫°n s·ª≠ d·ª•ng. Chi ti·∫øt l·ªói: {e}"
    except Exception as e:
        return f"ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {e}"

# --- Giao di·ªán Streamlit ---

# 1. T·∫£i File Word
st.subheader("1. T·∫£i file Word ch·ª©a Ph∆∞∆°ng √°n Kinh doanh (.docx)")
uploaded_file = st.file_uploader(
    "T·∫£i file Word ƒë·ªÉ AI tr√≠ch xu·∫•t th√¥ng tin (H·ªó tr·ª£ .docx)",
    type=['docx']
)

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu gi·ªØa c√°c l·∫ßn t∆∞∆°ng t√°c
if 'params' not in st.session_state:
    st.session_state['params'] = None
if 'metrics' not in st.session_state:
    st.session_state['metrics'] = None
if 'cash_flow_df' not in st.session_state:
    st.session_state['cash_flow_df'] = None

# N√∫t Tr√≠ch xu·∫•t
if uploaded_file is not None:
    if st.button("üöÄ L·ªçc Th√¥ng tin D·ª± √°n b·∫±ng AI (B∆∞·ªõc 1)", key="extract_btn", type="primary"):
        if not API_KEY:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY' trong Streamlit Secrets. Vui l√≤ng c·∫•u h√¨nh.")
        else:
            # ƒê·ªçc file bytes
            file_bytes = uploaded_file.getvalue()
            
            with st.spinner('AI ƒëang ƒë·ªçc v√† tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ file Word...'):
                extracted_params = extract_financial_parameters(
                    file_bytes, 
                    uploaded_file.type, 
                    API_KEY
                )
            
            if extracted_params:
                st.session_state['params'] = extracted_params
                st.session_state['metrics'] = None # Reset metrics khi c√≥ th√¥ng s·ªë m·ªõi
                st.session_state['ai_analysis'] = None
                st.success("‚úÖ Tr√≠ch xu·∫•t th√¥ng tin th√†nh c√¥ng! Chuy·ªÉn sang B∆∞·ªõc 2 & 3.")

# 2. Hi·ªÉn th·ªã Tham s·ªë v√† X√¢y d·ª±ng D√≤ng ti·ªÅn (Task 2)
if st.session_state['params']:
    params = st.session_state['params']
    
    st.markdown("---")
    st.subheader("2. Th√¥ng s·ªë D·ª± √°n ƒë√£ L·ªçc v√† B·∫£ng D√≤ng ti·ªÅn")
    
    st.info(f"D·ª± √°n ƒëang ph√¢n t√≠ch: **{params.get('project_name', 'N/A')}**")
    
    # Hi·ªÉn th·ªã c√°c th√¥ng s·ªë ƒë√£ l·ªçc
    col_v, col_n, col_wacc, col_thue = st.columns(4)
    with col_v:
        st.metric("V·ªën ƒë·∫ßu t∆∞ (CF0)", f"{params['investment_cost']:,.0f}")
    with col_n:
        st.metric("D√≤ng ƒë·ªùi D·ª± √°n (NƒÉm)", f"{params['project_lifetime_years']}")
    with col_wacc:
        st.metric("WACC (Chi ph√≠ v·ªën)", f"{params['wacc_rate']*100:.2f}%")
    with col_thue:
        st.metric("Thu·∫ø su·∫•t", f"{params['tax_rate']*100:.0f}%")

    col_rev, col_cost = st.columns(2)
    with col_rev:
        st.metric("Doanh thu h√†ng nƒÉm (R)", f"{params['annual_revenue']:,.0f}")
    with col_cost:
        st.metric("Chi ph√≠ h√†ng nƒÉm (C)", f"{params['annual_cost_excluding_tax']:,.0f}")
        
    try:
        # L·∫•y gi√° tr·ªã t·ª´ dict params
        N = params['project_lifetime_years']
        R = params['annual_revenue']
        C = params['annual_cost_excluding_tax']
        T = params['tax_rate']
        I = params['investment_cost']
        WACC = params['wacc_rate']

        # D√≤ng ti·ªÅn r√≤ng h√†ng nƒÉm (Net Cash Flow - NCF)
        # NCF = (Doanh thu - Chi ph√≠) * (1 - Thu·∫ø)
        ncf_yearly = (R - C) * (1 - T)
        
        # T·∫°o d√≤ng ti·ªÅn
        years = list(range(N + 1))
        cash_flows_list = [-I] + [ncf_yearly] * N # CF[0] l√† V·ªën ƒë·∫ßu t∆∞ (s·ªë √¢m)
        
        # T·∫°o DataFrame cho b·∫£ng d√≤ng ti·ªÅn
        cash_flow_df = pd.DataFrame({
            "NƒÉm": years,
            "D√≤ng ti·ªÅn r√≤ng (NCF)": cash_flows_list,
            "H·ªá s·ªë Chi·∫øt kh·∫•u": [1/((1 + WACC)**i) for i in years],
        })
        
        # T√≠nh to√°n D√≤ng ti·ªÅn Chi·∫øt kh·∫•u (DCF)
        cash_flow_df["D√≤ng ti·ªÅn Chi·∫øt kh·∫•u (DCF)"] = cash_flow_df.apply(
            lambda row: row['D√≤ng ti·ªÅn r√≤ng (NCF)'] * row["H·ªá s·ªë Chi·∫øt kh·∫•u"], axis=1
        )
        
        st.dataframe(
            cash_flow_df.style.format({
                "D√≤ng ti·ªÅn r√≤ng (NCF)": "{:,.0f}",
                "H·ªá s·ªë Chi·∫øt kh·∫•u": "{:.4f}",
                "D√≤ng ti·ªÅn Chi·∫øt kh·∫•u (DCF)": "{:,.0f}",
            }), 
            use_container_width=True
        )
        st.session_state['cash_flow_df'] = cash_flow_df
        
    except KeyError:
        st.error("L·ªói: Thi·∫øu tham s·ªë c·∫ßn thi·∫øt ƒë·ªÉ x√¢y d·ª±ng d√≤ng ti·ªÅn. Vui l√≤ng ki·ªÉm tra file Word.")
    except Exception as e:
        st.error(f"L·ªói khi x√¢y d·ª±ng d√≤ng ti·ªÅn: {e}")
        
# 3. T√≠nh to√°n v√† Hi·ªÉn th·ªã c√°c Ch·ªâ s·ªë ƒê√°nh gi√° (Task 3)
if st.session_state['cash_flow_df'] is not None:
    st.markdown("---")
    st.subheader("3. C√°c Ch·ªâ s·ªë ƒê√°nh gi√° Hi·ªáu qu·∫£ D·ª± √°n")
    
    try:
        cash_flows = st.session_state['cash_flow_df']['D√≤ng ti·ªÅn r√≤ng (NCF)'].tolist()
        wacc = params['wacc_rate']
        
        # T√≠nh to√°n c√°c ch·ªâ s·ªë 
        metrics = calculate_project_metrics(cash_flows, wacc)
        st.session_state['metrics'] = metrics
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£
        col_npv, col_irr, col_pp, col_dpp = st.columns(4)
        
        with col_npv:
            st.metric("NPV (Gi√° tr·ªã hi·ªán t·∫°i r√≤ng)", f"{metrics['NPV']:,.0f}")
        with col_irr:
            st.metric("IRR (T·ª∑ su·∫•t sinh l·ªùi n·ªôi b·ªô)", f"{metrics['IRR']*100:.2f}%")
        with col_pp:
            st.metric("PP (Th·ªùi gian ho√†n v·ªën)", f"{metrics['PP']:.2f} nƒÉm")
        with col_dpp:
            st.metric("DPP (Ho√†n v·ªën chi·∫øt kh·∫•u)", f"{metrics['DPP']:.2f} nƒÉm")
            
    except Exception as e:
        st.error(f"L·ªói khi t√≠nh to√°n c√°c ch·ªâ s·ªë: {e}")

# 4. Ph√¢n t√≠ch AI (Task 4)
if st.session_state['metrics'] is not None:
    st.markdown("---")
    st.subheader("4. Ph√¢n t√≠ch Ch·ªâ s·ªë Hi·ªáu qu·∫£ D·ª± √°n (AI)")
    
    if st.button("üß† Y√™u c·∫ßu AI Ph√¢n t√≠ch Hi·ªáu qu·∫£ (B∆∞·ªõc 2)", key="analyze_btn"):
        if not API_KEY:
            st.error("L·ªói: Kh√¥ng t√¨m th·∫•y Kh√≥a API 'GEMINI_API_KEY'. Vui l√≤ng c·∫•u h√¨nh.")
        else:
            with st.spinner('ƒêang g·ª≠i d·ªØ li·ªáu v√† ch·ªù Gemini ph√¢n t√≠ch...'):
                # Chu·∫©n b·ªã d·ªØ li·ªáu cho AI
                metrics_data = {
                    "NPV": f"{st.session_state['metrics']['NPV']:,.0f}",
                    "IRR": f"{st.session_state['metrics']['IRR']*100:.2f}%",
                    "WACC": f"{params['wacc_rate']*100:.2f}%",
                    "PP": f"{st.session_state['metrics']['PP']:.2f} nƒÉm",
                    "DPP": f"{st.session_state['metrics']['DPP']:.2f} nƒÉm",
                    "D√≤ng ƒë·ªùi D·ª± √°n": f"{params['project_lifetime_years']} nƒÉm"
                }
                
                # G·ª≠i 4 d√≤ng ƒë·∫ßu v√† d√≤ng cu·ªëi c·ªßa Cash Flow ƒë·ªÉ AI c√≥ c√°i nh√¨n t·ªïng quan
                df_to_analyze = st.session_state['cash_flow_df'].iloc[0:4]
                if len(st.session_state['cash_flow_df']) > 4:
                    df_to_analyze = pd.concat([df_to_analyze, st.session_state['cash_flow_df'].tail(1)], ignore_index=True)
                
                analysis_result = get_project_analysis(
                    metrics_data, 
                    df_to_analyze,
                    API_KEY
                )
                
                st.session_state['ai_analysis'] = analysis_result

    if 'ai_analysis' in st.session_state:
        st.markdown("**K·∫øt qu·∫£ Ph√¢n t√≠ch t·ª´ Gemini AI:**")
        st.info(st.session_state['ai_analysis'])

st.markdown("---")
st.caption("‚ö†Ô∏è L∆∞u √Ω: ·ª®ng d·ª•ng n√†y ho·∫°t ƒë·ªông d·ª±a tr√™n gi·∫£ ƒë·ªãnh **D√≤ng ti·ªÅn r√≤ng h√†ng nƒÉm kh√¥ng ƒë·ªïi**. ƒê·ªÉ s·ª≠ d·ª•ng, b·∫°n c·∫ßn c√≥ Kh√≥a API Gemini ƒë∆∞·ª£c c·∫•u h√¨nh trong Streamlit Secrets v·ªõi t√™n l√† `GEMINI_API_KEY`.")
